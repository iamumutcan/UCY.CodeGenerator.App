using AutoMapper;
using Microsoft.AspNetCore.Mvc;
using {{ProjectName}}{{CoreLayer}}.DTOs;
using {{ProjectName}}{{CoreLayer}}.Model;
using {{ProjectName}}{{CoreLayer}}.Services;
using {{ProjectName}}{{APILayer}}.Filters;
using System.Linq.Expressions;

namespace {{ProjectName}}{{APILayer}}.Controllers
{
    public class {{ModelName}}Controller : CustomBaseController
    {
        private readonly IMapper _mapper;
        private readonly I{{ModelName}}Service _service;

        public {{ModelName}}Controller(IMapper mapper, I{{ModelName}}Service service)
        {
            _service = service;
            _mapper = mapper;
        }

        /// GET api/{{modelNameLower}}
        [HttpGet]
        public async Task<IActionResult> All()
        {
            var items = await _service.GetAllAsync();
            var itemsDtos = _mapper.Map<List<{{ModelName}}ListedResponseDto>>(items.ToList());
            return CreateActionResult(CustomResponseDto<List<{{ModelName}}ListedResponseDto>>.Success(200, itemsDtos));
        }

        // GET /api/{{modelNameLower}}/5
        [ServiceFilter(typeof(NotFoundFilter<{{ModelName}}>))]
        [HttpGet("{id}")]
        public async Task<IActionResult> GetById(int id)
        {
            var item = await _service.GetByIdAsync(id);
            var itemsDtos = _mapper.Map<{{ModelName}}ResponseDto>(item);
            return CreateActionResult(CustomResponseDto<{{ModelName}}ResponseDto>.Success(200, itemsDtos));
        }
        
        [HttpPost("bulk")]
        public async Task<IActionResult> AddRange([FromBody] List<{{ModelName}}CreateRequestDto> itemsDtos)
        {
            var items = _mapper.Map<List<{{ModelName}}>>(itemsDtos);
            var addedItems = await _service.AddRangeAsync(items);
            var addedItemsDtos = _mapper.Map<List<{{ModelName}}CreatedResponseDto>>(addedItems);
            return CreateActionResult(CustomResponseDto<List<{{ModelName}}CreatedResponseDto>>.Success(201, addedItemsDtos));
        }

        [HttpPost]
        public async Task<IActionResult> Save({{ModelName}}CreateRequestDto itemDto)
        {
            var item = await _service.AddAsync(_mapper.Map<{{ModelName}}>(itemDto));
            var itemsDtos = _mapper.Map<{{ModelName}}CreatedResponseDto>(item);
            return CreateActionResult(CustomResponseDto<{{ModelName}}CreatedResponseDto>.Success(201, itemsDtos));
        }

        [HttpPut]
        public async Task<IActionResult> Update({{ModelName}}UpdateRequestDto itemDto)
        {
            await _service.UpdateAsync(_mapper.Map<{{ModelName}}>(itemDto));
            return CreateActionResult(CustomResponseDto<NoContentDto>.Success(204));
        }

        // DELETE api/{{modelNameLower}}/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> Remove(int id)
        {
            var item = await _service.GetByIdAsync(id);
            await _service.RemoveAsync(item);
            return CreateActionResult(CustomResponseDto<NoContentDto>.Success(204));
        }

        // GET api/{{modelNameLower}}/paged
        [HttpGet("paged")]
        public async Task<IActionResult> GetPagedItems([FromQuery] int pageNumber = 1, [FromQuery] int pageSize = 10)
        {
            var pagedItems = await _service.GetPagedDataAsync(pageNumber, pageSize);
            var itemDtos = _mapper.Map<List<{{ModelName}}ListedResponseDto>>(pagedItems.Items.ToList());
            var response = new PaginationDto<{{ModelName}}ListedResponseDto>
            {
                PageNumber = pagedItems.PageNumber,
                PageSize = pagedItems.PageSize,
                TotalCount = pagedItems.TotalCount,
                Items = itemDtos
            };
            return CreateActionResult(CustomResponseDto<PaginationDto<{{ModelName}}ListedResponseDto>>.Success(200, response));
        }
        
        [HttpPost("filter")]
        public async Task<IActionResult> FilterProducts([FromBody] FilterDto filter)
        {
            var result = await _service.FilterAsync(filter.Filters, filter.PageNumber, filter.PageSize);
            var dtoItems = _mapper.Map<List<{{ModelName}}ResponseDto>>(result.Items);

            var response = new PaginationDto<{{ModelName}}ResponseDto>
            {
                PageNumber = result.PageNumber,
                PageSize = result.PageSize,
                TotalCount = result.TotalCount,
                Items = dtoItems
            };

            return CreateActionResult(CustomResponseDto<PaginationDto<{{ModelName}}ResponseDto>>.Success(200, response));
        }
    }
}
