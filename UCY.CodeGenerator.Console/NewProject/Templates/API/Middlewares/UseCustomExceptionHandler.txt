using Microsoft.AspNetCore.Diagnostics;
using {{ProjectName}}{{CoreLayer}}.DTOs;
using {{ProjectName}}{{ServiceLayer}}.Exceptions;
using System.Security.Authentication;
using System.Text.Json;

namespace {{ProjectName}}{{APILayer}}.Middlewares;

public static class UseCustomExceptionHandler
{
    public static void UseCustomException(this IApplicationBuilder app)
    {
        app.UseExceptionHandler(config =>
        {
            config.Run(async context =>
            {
                var logger = context.RequestServices
                    .GetRequiredService<ILoggerFactory>()
                    .CreateLogger("GlobalExceptionHandler");

                context.Response.ContentType = "application/json";

                var exceptionFeature = context.Features.Get<IExceptionHandlerFeature>();
                var exception = exceptionFeature?.Error;

                if (exception != null)
                {
                    logger.LogError(exception, "Unhandled exception occurred: {Message}", exception.Message);
                }

                var statusCode = exception switch
                {
                    AuthorizationException => StatusCodes.Status403Forbidden,
                    AuthenticationException => StatusCodes.Status401Unauthorized,
                    ClientSideException => StatusCodes.Status400BadRequest,
                    _ => StatusCodes.Status500InternalServerError
                };

                var response = exception switch
                {
                    AuthorizationException => CustomResponseDto<NoContentDto>.Fail(statusCode, "Authorization error: " + exception.Message),
                    AuthenticationException => CustomResponseDto<NoContentDto>.Fail(statusCode, "Authentication error: " + exception.Message),
                    ClientSideException => CustomResponseDto<NoContentDto>.Fail(statusCode, "Client error: " + exception.Message),
                    _ => CustomResponseDto<NoContentDto>.Fail(statusCode, "Server error: " + exception?.Message)
                };

                context.Response.StatusCode = statusCode;
                await context.Response.WriteAsync(JsonSerializer.Serialize(response));
            });
        });
    }

}
