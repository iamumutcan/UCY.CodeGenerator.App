using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;
using Microsoft.IdentityModel.Tokens;
using {{ProjectName}}{{APILayer}}.Filters;
using {{ProjectName}}{{DtoLayer}}.DTOs;
using {{ProjectName}}{{CoreLayer}}.Model;
using {{ProjectName}}{{CoreLayer}}.Services;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

namespace {{ProjectName}}{{APILayer}}.Controllers
{
    public class UsersController : CustomBaseController
    {
        private readonly IMapper _mapper;
        private readonly IUserService _service;
        private readonly JwtSettings _jwtSettings;

        public UsersController(IMapper mapper, IUserService service, IOptions<JwtSettings> jwtSettings)
        {
            _service = service;
            _mapper = mapper;
            _jwtSettings = jwtSettings.Value;
        }

        /// GET api/user
        [Authorize(Roles = "admin")] // Sadece 'admin' rolüne sahip kullanýcýlar eriþebilir
        [HttpGet]
        public async Task<IActionResult> All()
        {
            var items = await _service.GetAllAsync();
            var itemsDtos = _mapper.Map<List<UserDto>>(items.ToList());
            return CreateActionResult(CustomResponseDto<List<UserDto>>.Success(200, itemsDtos));
        }
        // GET /api/user/5
        [ServiceFilter(typeof(NotFoundFilter<User>))]
        [HttpGet("{id}")]
        public async Task<IActionResult> GetById(int id)
        {
            var item = await _service.GetByIdAsync(id);
            var itemsDtos = _mapper.Map<UserDto>(item);
            return CreateActionResult(CustomResponseDto<UserDto>.Success(200, itemsDtos));
        }

        [HttpPost]
        public async Task<IActionResult> Save(UserDto itemDto)
        {
            var item = await _service.AddAsync(_mapper.Map<User>(itemDto));
            var itemsDtos = _mapper.Map<UserDto>(item);
            return CreateActionResult(CustomResponseDto<UserDto>.Success(201, itemsDtos));
        }

        [HttpPut]
        public async Task<IActionResult> Update(UserDto itemDto)
        {
            await _service.UpdateAsync(_mapper.Map<User>(itemDto));
            return CreateActionResult(CustomResponseDto<NoContentDto>.Success(204));
        }

        // DELETE api/user/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> Remove(int id)
        {
            var item = await _service.GetByIdAsync(id);
            await _service.RemoveAsync(item);
            return CreateActionResult(CustomResponseDto<NoContentDto>.Success(204));
        }

        // GET api/user/paged
        [HttpGet("paged")]
        public async Task<IActionResult> GetPagedItems([FromQuery] int pageNumber = 1, [FromQuery] int pageSize = 10)
        {
            var pagedItems = await _service.GetPagedDataAsync(pageNumber, pageSize);
            var itemDtos = _mapper.Map<List<UserDto>>(pagedItems.Items.ToList());
            var response = new PaginationDto<UserDto>
            {
                PageNumber = pagedItems.PageNumber,
                PageSize = pagedItems.PageSize,
                TotalCount = pagedItems.TotalCount,
                Items = itemDtos
            };
            return CreateActionResult(CustomResponseDto<PaginationDto<UserDto>>.Success(200, response));
        }


     
    }
}
