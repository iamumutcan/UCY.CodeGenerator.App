using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;
using Microsoft.IdentityModel.Tokens;
using Microsoft.AspNetCore.Identity;

using {{ProjectName}}{{APILayer}}.Filters;
using {{ProjectName}}{{APILayer}}.Modules;
using {{ProjectName}}{{CoreLayer}}.DTOs;
using {{ProjectName}}{{CoreLayer}}.Model;
using {{ProjectName}}{{CoreLayer}}.Services;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

namespace {{ProjectName}}{{APILayer}}.Controllers;


public class AuthController : CustomBaseController
{
    private readonly UserManager<ApplicationUser> _userManager; // IdentityUser kullan�l�yor
    private readonly SignInManager<ApplicationUser> _signInManager;
    private readonly TokenService _tokenService;

    public AuthController(UserManager<ApplicationUser> userManager, SignInManager<ApplicationUser> signInManager, TokenService tokenService, ILogger<AuthController> logger) : base(logger)
    {
        _userManager = userManager;
        _signInManager = signInManager;
        _tokenService = tokenService;
    }

    [HttpPost("register")]
    public async Task<IActionResult> Register([FromBody] RegisterDto request)
    {
        var user = new ApplicationUser
        {
            UserName = request.Email,
            Email = request.Email,
            FirstName = request.FirstName, 
            LastName = request.LastName    
        };

        var result = await _userManager.CreateAsync(user, request.Password);

        if (result.Succeeded)
        {

            return CreateActionResult(CustomResponseDto<object>.Success(201, new
            {
                email = user.Email
            }));
        }
        var errors = result.Errors.Select(e => e.Description).ToList();
        return CreateActionResult(CustomResponseDto<NoContentDto>.Fail(400, errors));
    }

    [HttpPost("login")]
    public async Task<IActionResult> Login([FromBody] LoginRequest request)
    {
        var user = await _userManager.FindByEmailAsync(request.Email);
        if (user == null) return Unauthorized("User not found");

        var result = await _signInManager.CheckPasswordSignInAsync(user, request.Password, false);
        if (!result.Succeeded) return Unauthorized("Incorrect password");

        var accessToken = _tokenService.CreateJwtToken(user);
        var refreshToken = _tokenService.GenerateRefreshToken();

        return Ok(new
        {
            Token = accessToken,
            RefreshToken = refreshToken
        });
    }


}
