using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;
using Microsoft.IdentityModel.Tokens;
using Microsoft.AspNetCore.Identity;
using {{ProjectName}}{{APILayer}}.Filters;
using {{ProjectName}}{{APILayer}}.Modules;
using {{ProjectName}}{{CoreLayer}}.DTOs;
using {{ProjectName}}{{CoreLayer}}.Model;
using {{ProjectName}}{{CoreLayer}}.Services;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

namespace {{ProjectName}}{{APILayer}}.Controllers;

public class AuthController : CustomBaseController
{
    private readonly UserManager<IdentityUser> _userManager; // IdentityUser kullanýlýyor
    private readonly SignInManager<IdentityUser> _signInManager;
    private readonly TokenService _tokenService;

    public AuthController(UserManager<IdentityUser> userManager, SignInManager<IdentityUser> signInManager, TokenService tokenService)
    {
        _userManager = userManager;
        _signInManager = signInManager;
        _tokenService = tokenService;
    }

    [HttpPost("register")]
    public async Task<IActionResult> Register(string email, string password)
    {
        var user = new IdentityUser { UserName = email, Email = email };
        var result = await _userManager.CreateAsync(user, password);
        if (result.Succeeded)
        {
            return Ok("Kayýt baþarýlý");
        }
        return BadRequest(result.Errors);
    }

    [HttpPost("login")]
    public async Task<IActionResult> Login([FromBody] LoginRequest request)
    {
        var user = await _userManager.FindByEmailAsync(request.Email);
        if (user == null) return Unauthorized("Kullanýcý bulunamadý");

        var result = await _signInManager.CheckPasswordSignInAsync(user, request.Password, false);
        if (!result.Succeeded) return Unauthorized("Þifre yanlýþ");

        var accessToken = _tokenService.CreateJwtToken(user);
        var refreshToken = _tokenService.GenerateRefreshToken();

        return Ok(new
        {
            Token = accessToken,
            RefreshToken = refreshToken
        });
    }


}
