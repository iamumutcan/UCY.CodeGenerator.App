using {{ProjectName}}{{CoreLayer}}.Model;
using System.Linq.Expressions;

namespace {{ProjectName}}{{CoreLayer}}.Services;

public interface IService<T> where T : class
{
    Task<T> GetByIdAsync(int id);
    Task<IEnumerable<T>> GetAllAsync();
    IQueryable<T> Where(Expression<Func<T, bool>> expression);
    Task<bool> AnyAsync(Expression<Func<T, bool>> expression);
    Task<T> AddAsync(T entity);
    Task<IEnumerable<T>> AddRangeAsync(IEnumerable<T> entities);
    Task UpdateAsync(T entity);
    Task RemoveAsync(T entity, bool? hardelete = false);
    Task RemoveRangeAsync(IEnumerable<T> entities);
    Task<PaginationModel<T>> GetPagedDataAsync(int pageNumber, int pageSize);
    Task<PaginationModel<T>> FilterAsync(List<FilterRequest> filters, int pageNumber, int pageSize);

}
