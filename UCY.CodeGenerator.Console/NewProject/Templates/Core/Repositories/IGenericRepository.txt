using {{ProjectName}}{{CoreLayer}}.Model;
using System.Linq.Expressions;

namespace {{ProjectName}}{{CoreLayer}}.Repositories;
public interface IGenericRepository<T> where T : class
{
    Task<T> GetByIdAsync(int id);
    IQueryable<T> GetAll();
    IQueryable<T> Where(Expression<Func<T, bool>> expression);
    Task<bool> AnyAsync(Expression<Func<T, bool>> expression);
    Task AddAsync(T entity);
    Task AddRangeAsync(IEnumerable<T> entities);
    void Update(T entity);
    void Remove(T entity);
    void RemoveRange(IEnumerable<T> entities);
    Task<PaginationModel<T>> GetPagedDataAsync(int pageNumber, int pageSize, Expression<Func<T, bool>> filter = null);
}
